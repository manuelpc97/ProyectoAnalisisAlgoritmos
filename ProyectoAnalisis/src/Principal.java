
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.MultiGraph;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.Viewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author manuelpc97
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        grafo = new MultiGraph("Prueba");
        viewer = grafo.display(true);
        view = viewer.addDefaultView(true);
        this.jInternalFrame1.add((Component) view);
        this.repaint();
        vertexList = new ArrayList();
        id = 0;
        edges = new ArrayList();
        vertexNames = new ArrayList();
        myGraph = new Grafo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        tf_vertexName = new javax.swing.JTextField();
        bt_addVertex = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cb_source = new javax.swing.JComboBox<>();
        bt_addEdge = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cb_target = new javax.swing.JComboBox<>();
        bt_TSP = new javax.swing.JButton();
        bt_complemento = new javax.swing.JButton();
        bt_BronKerbosch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        bt_clean = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        jButton3.setText("Agregar Nodo");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Valor ");

        jLabel7.setText("Valor ");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jLabel6)
                .addGap(53, 53, 53)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addContainerGap(118, Short.MAX_VALUE))
            .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDialog1Layout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(jLabel7)
                    .addContainerGap(341, Short.MAX_VALUE)))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(144, 144, 144))
            .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDialog1Layout.createSequentialGroup()
                    .addGap(117, 117, 117)
                    .addComponent(jLabel7)
                    .addContainerGap(313, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 789, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("Vertice");

        bt_addVertex.setText("Agregar");
        bt_addVertex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_addVertexMouseClicked(evt);
            }
        });

        jLabel2.setText("Arista");

        bt_addEdge.setText("Agregar");
        bt_addEdge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_addEdgeMouseClicked(evt);
            }
        });

        jButton1.setText("Nuevo Grafo");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        bt_TSP.setText("Coloreabilidad");
        bt_TSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_TSPMouseClicked(evt);
            }
        });

        bt_complemento.setText("Clique Fuerza Bruta");
        bt_complemento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_complementoMouseClicked(evt);
            }
        });

        bt_BronKerbosch.setText("Clique Bron-Kerbosch");
        bt_BronKerbosch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_BronKerboschMouseClicked(evt);
            }
        });

        jLabel4.setText("Coloreabilidad");

        jLabel5.setText("Clique");

        jButton2.setText("Vertex Cover");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel8.setText("Vertex Cover");

        bt_clean.setText("Limpiar Grafo");
        bt_clean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_cleanMouseClicked(evt);
            }
        });

        jLabel3.setText("Knapsack");

        jButton4.setText("Knapsack");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(bt_addVertex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(tf_vertexName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 15, Short.MAX_VALUE)
                                .addComponent(cb_source, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(cb_target, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bt_addEdge, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(54, 54, 54))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jButton2)
                            .addComponent(bt_TSP)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bt_BronKerbosch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bt_complemento))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bt_clean, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jButton4))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(bt_clean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_addVertex)
                    .addComponent(jLabel1))
                .addGap(16, 16, 16)
                .addComponent(tf_vertexName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_addEdge)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_target, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_TSP)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_BronKerbosch)
                    .addComponent(bt_complemento))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(108, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if (vertexNames.size() > 0) {
            grafo.clear();
        } 

        vertexList = new ArrayList();
        id = 0;
        edges = new ArrayList();
        vertexNames = new ArrayList();
        myGraph = new Grafo();
    }//GEN-LAST:event_jButton1MouseClicked

    private void bt_addVertexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_addVertexMouseClicked
        // TODO add your handling code here:
        if (validVertexName(this.tf_vertexName.getText())) {
            try {
                grafo.addNode(this.tf_vertexName.getText());
                grafo.getNode(this.tf_vertexName.getText()).addAttribute("ui.label", this.tf_vertexName.getText());
                grafo.getNode(this.tf_vertexName.getText()).addAttribute("ui.style", "size: 20px; fill-color: BLUE;");
                vertexNames.add(this.tf_vertexName.getText());
                if (vertexNames.size() == 1) {
                    myGraph.setVerticePrincipal(new Vertice(this.tf_vertexName.getText()));
                } else {
                    myGraph.addVertice(this.tf_vertexName.getText());
                }
                JOptionPane.showMessageDialog(this, "Vertice Creado", "Exito", JOptionPane.PLAIN_MESSAGE);
                this.tf_vertexName.setText("");
            } finally {
                updateBoxes();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se puede agregar el vertice", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_bt_addVertexMouseClicked

    private void bt_addEdgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_addEdgeMouseClicked
        // TODO add your handling code here:    
        try {
            grafo.addEdge(id + "", this.cb_source.getSelectedItem().toString(), this.cb_target.getSelectedItem().toString());
            id++;
            myEdge = new Arista(myGraph.getVertexByValue(this.cb_source.getSelectedItem().toString()),
                    myGraph.getVertexByValue(this.cb_target.getSelectedItem().toString()), 0);
            myGraph.addEdge(myGraph.getVertexByValue(this.cb_source.getSelectedItem().toString()), myEdge);
            myEdge = new Arista(myGraph.getVertexByValue(this.cb_target.getSelectedItem().toString()),
                    myGraph.getVertexByValue(this.cb_source.getSelectedItem().toString()), 0);
            myGraph.addEdge(myGraph.getVertexByValue(this.cb_target.getSelectedItem().toString()), myEdge);
        } finally {
            JOptionPane.showMessageDialog(this, "Arista Creada", "Exito", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_bt_addEdgeMouseClicked

    private void bt_TSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_TSPMouseClicked
        //TODO add your handling code here:
        ArrayList<ArrayList<Vertice>> allIS = new ArrayList();

        this.getAllIndependentSets(myGraph.getCopy(), allIS);

        for (int i = 0; i < allIS.size(); i++) {
            System.out.println(allIS.get(i).toString());
        }

        this.colorIndependentSets(allIS);
        JOptionPane.showMessageDialog(this, "Se necesitan: " + allIS.size() + " colores");
    }//GEN-LAST:event_bt_TSPMouseClicked

    private void bt_complementoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_complementoMouseClicked
        // TODO add your handling code here:
        ArrayList<ArrayList<Vertice>> cliques = this.Clique();
        ArrayList<Vertice> clique = this.getMaxClique(cliques);
        this.colorVertex(clique);
        JOptionPane.showMessageDialog(this, "Clique maximo: " + clique.toString());
    }//GEN-LAST:event_bt_complementoMouseClicked

    private void bt_BronKerboschMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_BronKerboschMouseClicked
        // TODO add your handling code here:
        ArrayList<Vertice> clique = new ArrayList();
        BronKerbosch(myGraph.getTodosVertices(), new ArrayList<Vertice>(), new ArrayList<Vertice>(),
                clique);
        this.colorVertex(clique);
        JOptionPane.showMessageDialog(this, "Clique maximo: " + clique.toString());
    }//GEN-LAST:event_bt_BronKerboschMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        colorVertex(getVertex(myGraph.getTodosVertices()));
    }//GEN-LAST:event_jButton2MouseClicked

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        nodosa.add(new nodo(Integer.parseInt(this.jTextField1.getText()), Integer.parseInt(this.jTextField2.getText())));
    }//GEN-LAST:event_jButton3MouseClicked

    private void bt_cleanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_cleanMouseClicked
        // TODO add your handling code here:
        for (int i = 0; i < grafo.getNodeCount(); i++) {
            grafo.getNode(i).setAttribute("ui.style", "size: 20px; fill-color: BLUE;");
        }
    }//GEN-LAST:event_bt_cleanMouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        this.jDialog1.pack();
        this.jDialog1.setLocationRelativeTo(this);
        this.jDialog1.setVisible(true);
    }//GEN-LAST:event_jButton4MouseClicked

    public void colorVertex(ArrayList<Vertice> list) {
        for (int i = 0; i < list.size(); i++) {
            grafo.getNode(list.get(i).value.toString()).addAttribute("ui.style", "size: 20px; fill-color: RED;");
        }
    }

    public void colorIndependentSets(ArrayList<ArrayList<Vertice>> sets) {
        String[] colors = new String[9];
        colors[0] = "BLUE";
        colors[1] = "RED";
        colors[2] = "GREEN";
        colors[3] = "YELLOW";
        colors[4] = "BLACK";
        colors[5] = "GRAY";
        colors[6] = "ORANGE";
        colors[7] = "PINK";
        colors[8] = "MAGENTA";
        int index = 0;
        String color = "";

        for (int i = 0; i < sets.size(); i++) {
            color = colors[index];
            index++;
            if (index == 9) {
                index = 0;
            }
            for (int k = 0; k < sets.get(i).size(); k++) {
                grafo.getNode(sets.get(i).get(k).getValue().toString()).addAttribute("ui.style", "size: 20px; fill-color: " + color + ";");
            }
        }
    }

    public int generatePosition(int bound) {
        Random r = new Random();
        return r.nextInt(bound) + 1;
    }

    public boolean validVertexName(String name) {
        for (int i = 0; i < vertexNames.size(); i++) {
            if (vertexNames.get(i).equals(name)) {
                return false;
            }
        }
        return true;
    }

    public void updateBoxes() {
        DefaultComboBoxModel<String> model1 = new DefaultComboBoxModel();
        DefaultComboBoxModel<String> model2 = new DefaultComboBoxModel();

        for (int i = 0; i < vertexNames.size(); i++) {
            model1.addElement(vertexNames.get(i));
            model2.addElement(vertexNames.get(i));
        }

        this.cb_source.setModel(model1);
        this.cb_target.setModel(model2);
    }

    public ArrayList<ArrayList<Vertice>> Clique() {
        ArrayList<ArrayList<Vertice>> cliques = new ArrayList();
        ArrayList<Vertice> myVertex = myGraph.getTodosVertices();
        ArrayList<Vertice> temp = new ArrayList();

        for (int i = 0; i < myVertex.size(); i++) {
            temp = new ArrayList();
            temp.add(myVertex.get(i));
            temp = getClique(myVertex.get(i).getNeighborsAndMe(), 1, myVertex.get(i).getAristas().size() + 1, temp);
            cliques.add(temp);
        }
        return cliques;
    }

    public boolean isSubset(ArrayList<Vertice> set, ArrayList<Vertice> subset) {
        if (subset.size() > set.size()) {
            return false;
        }

        for (int i = 0; i < subset.size(); i++) {
            if (!set.contains(subset.get(i))) {
                return false;
            }
        }
        return true;
    }

    public ArrayList<Vertice> getClique(ArrayList<Vertice> list, int position, int size, ArrayList<Vertice> retorno) {
        if (position == size - 1) {
            if (isSubset(list.get(position).getNeighborsAndMe(), list)) {
                retorno.add(list.get(position));
            }
        } else {
            if (isSubset(list.get(position).getNeighborsAndMe(), list)) {
                retorno.add(list.get(position));
                getClique(list, position + 1, size, retorno);
            } else {
                list.remove(list.get(position));
                getClique(list, position, size - 1, retorno);
            }
        }
        return retorno;
    }

    public ArrayList<Vertice> getMaxClique(ArrayList<ArrayList<Vertice>> list) {
        ArrayList<Vertice> retorno = new ArrayList();

        retorno = list.get(0);

        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).size() > retorno.size()) {
                retorno = list.get(i);
            }
        }
        return retorno;
    }

    public void BronKerbosch(ArrayList<Vertice> P, ArrayList<Vertice> R, ArrayList<Vertice> X, ArrayList<Vertice> clique) {
        if (P.size() + X.size() == 0) {
            if (R.size() > clique.size()) {
                clique.clear();
                for (int i = 0; i < R.size(); i++) {
                    clique.add(R.get(i));
                }
            }
        } else {
            for (int i = 0; i < P.size(); i++) {
                BronKerbosch(getInterception(P, P.get(i).getNeighbors()), getUnion(R, P.get(i)), getInterception(X, P.get(i).getNeighbors()), clique);
                X.add(P.get(i));
                P.remove(P.get(i));
            }
        }
    }

    public ArrayList<Vertice> getUnion(ArrayList<Vertice> set, Vertice vertex) {
        ArrayList<Vertice> retorno = new ArrayList();
        for (int i = 0; i < set.size(); i++) {
            retorno.add(set.get(i));
        }
        retorno.add(vertex);
        return retorno;
    }

    public ArrayList<Vertice> getInterception(ArrayList<Vertice> set1, ArrayList<Vertice> set2) {
        ArrayList<Vertice> interception = new ArrayList();

        for (int i = 0; i < set1.size(); i++) {
            for (int k = 0; k < set2.size(); k++) {
                if (set1.get(i).equals(set2.get(k))) {
                    interception.add(set1.get(i));
                }
            }
        }
        return interception;
    }

    public void getIndependentSet(Grafo copy1, ArrayList<Vertice> independentSet) {
        if (copy1.verticePrincipal.getValue().toString().equals("-1")) {
            return;
        } else {
            ArrayList<Vertice> ordered = copy1.getOrderedVertex();
            ArrayList<Vertice> myNeighbors = ordered.get(0).getNeighborsAndMe();
            independentSet.add(ordered.get(0));

            for (int i = 0; i < myNeighbors.size(); i++) {
                copy1.removeVertex(myNeighbors.get(i));
            }

            getIndependentSet(copy1, independentSet);
        }
    }

    public void getAllIndependentSets(Grafo copy, ArrayList<ArrayList<Vertice>> allIS) {
        if (copy.verticePrincipal.getValue().toString().equals("-1")) {
            return;
        } else {
            ArrayList<Vertice> independentSet = new ArrayList();
            this.getIndependentSet(copy.getCopy(), independentSet);
            allIS.add(independentSet);

            for (int i = 0; i < independentSet.size(); i++) {
                copy.removeVertex(copy.getVertexByValue(independentSet.get(i).value.toString()));
            }
            this.getAllIndependentSets(copy, allIS);
        }
    }

    public ArrayList<nodo> snapsonnovios() {

        int[] arreglo = new int[nodosa.size()];
        nodo nodo1 = (new nodo(120, 10));
        int bandera = 0;
        int temporal;
        int temporal2;
        int temporal3;
        int temporal4;
        int[] pesos = new int[nodosa.size()];

        for (int i = 0; i < nodosa.size(); i++) {
            arreglo[i] = nodosa.get(i).getValor() / nodosa.get(i).getPeso();
            pesos[i] = nodosa.get(i).getPeso();
        }
        for (int i = 0; i < arreglo.length; i++) {
            System.out.println(pesos[i] + "  ,  " + arreglo[i]);
        }

        System.out.println("");
        System.out.println("");
        while (bandera == 0) {
            for (int i = 0; i < arreglo.length - 1; i++) {
                if (arreglo[i] > arreglo[i + 1]) {
                    temporal = arreglo[i + 1];
                    temporal2 = arreglo[i];
                    arreglo[i] = temporal;
                    arreglo[i + 1] = temporal2;
                    temporal3 = pesos[i + 1];
                    temporal4 = pesos[i];
                    pesos[i] = temporal3;
                    pesos[i + 1] = temporal4;
                }
            }
            for (int i = 0; i < arreglo.length - 1; i++) {
                if (arreglo[i] > arreglo[i + 1]) {
                    bandera = 1;
                }
            }
            if (bandera == 1) {
                bandera = 0;
            } else {
                bandera = 1;
            }
        }
        for (int i = 0; i < arreglo.length; i++) {
            System.out.println(pesos[i] + "  ,  " + arreglo[i]);
        }
        System.out.println("");
        System.out.println("");
        int[] arreglo2 = new int[arreglo.length];
        int[] pesos2 = new int[pesos.length];
        int cont = 0;
        for (int i = arreglo.length - 1; i >= 0; i--) {
            arreglo2[cont] = arreglo[i];
            pesos2[cont] = pesos[i];
            cont++;
        }
        for (int i = 0; i < arreglo2.length; i++) {
            System.out.println(pesos2[i] + "  ,  " + arreglo2[i]);
        }
        System.out.println("");
        System.out.println("");

        bandera = 0;
        int limite = 30;
        int acumulador = 0;
        int contador = 0;
        int contador2 = 0;
        int actual = 0;
        ArrayList<nodo> nodes = new ArrayList<nodo>();

        while (acumulador <= limite) {
            actual = pesos2[contador];
            acumulador = acumulador + actual;
            nodo n = new nodo(actual, arreglo2[contador] * actual);
            contador++;
            if (acumulador <= limite) {
                nodes.add(n);
            }

        }

        /*
             acumulador = acumulador - actual;
              if (acumulador == limite || (acumulador + pesos2[pesos2.length - 1]) > limite) {
                  
            } else{
                   contador2 = contador2 - 1;
              }
              
                if(contador2==0){
                    contador2++;
                }
                nodo n = new nodo(actual, contador2);
                contador++;
            if (acumulador == limite || (acumulador + pesos2[pesos2.length - 1]) > limite) {
                bandera = 1;
                break;
            } 
               
             
                contador2 = 0;
                nodes.add(n);
            
        }

         */
        for (nodo node : nodes) {
            System.out.print(node.getValor() + " , " + node.getPeso());
            System.out.println("");
        }
        return nodes;
    }

    public ArrayList<Vertice> getVertex(ArrayList<Vertice> vertices) {
        ArrayList<Vertice> temporal = new ArrayList();
        ArrayList<Arista> aristas = new ArrayList();
        int bandera = 0;
        for (Vertice vertice : vertices) {
            for (Arista arista : vertice.getAristas()) {
                for (Arista arista1 : aristas) {
                    if (arista1 == arista) {
                        bandera = 1;
                    }
                }
                if (bandera == 0) {
                    aristas.add(arista);

                } else {
                    bandera = 0;
                }

            }
        }
        System.out.println(aristas.toString());
        int contador = aristas.size();
        ArrayList<Arista> aristastemporal = new ArrayList();
        aristastemporal = aristas;
        int[] arreglo;
        boolean salir = true;
        int bandera1 = 0;
        arreglo = new int[vertices.size()];
        int numero = 0;
        int cont = 0;
        for (int i = 0; i < arreglo.length; i++) {
            arreglo[i] = 100000000;
        }
        ArrayList<Arista> temporalaristas = new ArrayList();
        temporalaristas = aristas;
        int validacion = 1;
        while (validacion > 0) {
            while (salir == true) {
                numero = (int) (Math.random() * vertices.size());
                System.out.println(numero);
                for (int i = 0; i < arreglo.length; i++) {
                    if (arreglo[i] == numero) {
                        //System.out.println("llllllllllllllllllllllllllll");
                        bandera1 = 1;
                    }
                }
                if (bandera1 == 1) {
                    salir = true;
                    bandera1 = 0;
                } else {
                    arreglo[cont] = numero;
                    cont++;
                    //System.out.println("dddddddddddddddd");

                    break;

                }
                //System.out.println("xxxxxxxxxxxxxxxxx");
            }
            System.out.println("");

            /*   sou
            for (Arista arista : vertices.get(numero).aristas) {
                for (Arista arista1 : aristas) {
                    if (arista == arista1) {
                        aristas.remove(arista);
                    }
                } 
            }
             */
            for (Arista i : vertices.get(numero).getAristas()) {
                System.out.println("ffffffffff");
            }
            int num2 = 0;
            int num = 0;
            for (int i = 0; i < vertices.get(numero).aristas.size(); i++) {
                /*
                for (int j = 0; j < aristas.size(); j++) {
                  
                   
                    if (vertices.get(numero).aristas.get(i)== aristas.get(j)) {
                        System.out.println();
                        temporalaristas.remove(vertices.get(numero).aristas.get(i));
                        temporalaristas.remove(aristas.get(num2));
                         System.out.println("s");
                    } 
                   
                }
                 */
                Vertice destino = new Vertice();
                destino = vertices.get(numero).aristas.get(i).destino;
                for (int k = 0; k < aristas.size(); k++) {
                    if (aristas.get(k).destino == vertices.get(numero) && aristas.get(k).origen == destino) {
                        num2 = k;
                        System.out.println("lllllllllllllllllll");
                        System.out.println(aristas.get(k));
                        aristas.get(num2).eliminado = 0;

                    }
                    if (vertices.get(numero).aristas.get(i) == aristas.get(k)) {
                        aristas.get(k).eliminado = 0;
                        System.out.println("ssssssssssssssssssssss");
                        System.out.println(aristas.get(k));
                    }
                }

            }
            validacion = 0;
            for (int i = 0; i < aristas.size(); i++) {
                validacion = validacion + aristas.get(i).eliminado;

            }
            System.out.println("el tamanano es " + validacion);
            temporal.add(vertices.get(numero));

        }
        for (Vertice i : temporal) {
            System.out.println("candidatos");
            System.out.println(i.getValue());
            System.out.println(temporal.size());
        }
        for (int i = 0; i < arreglo.length; i++) {
            System.out.println(arreglo[i]);
        }
        return temporal;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_BronKerbosch;
    private javax.swing.JButton bt_TSP;
    private javax.swing.JButton bt_addEdge;
    private javax.swing.JButton bt_addVertex;
    private javax.swing.JButton bt_clean;
    private javax.swing.JButton bt_complemento;
    private javax.swing.JComboBox<String> cb_source;
    private javax.swing.JComboBox<String> cb_target;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField tf_vertexName;
    // End of variables declaration//GEN-END:variables
    Graph grafo;
    Viewer viewer;
    View view;
    Node node;
    Edge edge;
    ArrayList<Object> vertexList;
    ArrayList<String> vertexNames = new ArrayList();
    ArrayList<Object> edges;
    Grafo myGraph = new Grafo();
    Arista myEdge = new Arista();
    ArrayList<Vertice> myVertex = new ArrayList();
    ArrayList<nodo> nodosa = new ArrayList<nodo>();
    int id = 0;

}
