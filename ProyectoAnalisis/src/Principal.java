
import com.mxgraph.model.mxCell;
import com.mxgraph.model.mxICell;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.view.mxGraph;
import java.awt.Color;
import java.awt.Container;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.jgraph.JGraph;
import org.jgraph.graph.DefaultCellViewFactory;
import org.jgraph.graph.DefaultEdge;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.DefaultGraphModel;
import org.jgraph.graph.DefaultPort;
import org.jgraph.graph.Edge;
import org.jgraph.graph.GraphConstants;
import org.jgraph.graph.GraphLayoutCache;
import org.jgraph.graph.GraphModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author manuelpc97
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        tf_vertexName = new javax.swing.JTextField();
        bt_addVertex = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cb_source = new javax.swing.JComboBox<>();
        bt_addEdge = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cb_target = new javax.swing.JComboBox<>();
        tf_peso = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bt_TSP = new javax.swing.JButton();
        bt_complemento = new javax.swing.JButton();
        bt_BronKerbosch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 659, Short.MAX_VALUE)
        );

        jLabel1.setText("Vertice");

        bt_addVertex.setText("Agregar");
        bt_addVertex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_addVertexMouseClicked(evt);
            }
        });

        jLabel2.setText("Arista");

        bt_addEdge.setText("Agregar");
        bt_addEdge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_addEdgeMouseClicked(evt);
            }
        });

        jButton1.setText("Nuevo Grafo");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel3.setText("Peso");

        bt_TSP.setText("Coloreabilidad");
        bt_TSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_TSPMouseClicked(evt);
            }
        });

        bt_complemento.setText("Clique Fuerza Bruta");
        bt_complemento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_complementoMouseClicked(evt);
            }
        });

        bt_BronKerbosch.setText("Clique Bron-Kerbosch");
        bt_BronKerbosch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_BronKerboschMouseClicked(evt);
            }
        });

        jLabel4.setText("Coloreabilidad");

        jLabel5.setText("Clique");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_vertexName)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bt_addEdge, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(37, 37, 37)
                                .addComponent(bt_addVertex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                                        .addComponent(bt_BronKerbosch)
                                        .addGap(18, 18, 18)
                                        .addComponent(bt_complemento))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cb_source, 0, 118, Short.MAX_VALUE)
                                            .addComponent(cb_target, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tf_peso, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(bt_TSP)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(19, 19, 19))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(45, 45, 45)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(bt_addVertex))
                .addGap(18, 18, 18)
                .addComponent(tf_vertexName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_addEdge)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cb_source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_target, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_peso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_TSP)
                .addGap(25, 25, 25)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_complemento)
                    .addComponent(bt_BronKerbosch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        graph = new mxGraph();
        parent = graph.getDefaultParent();
        component = new mxGraphComponent(graph);
        component.setSize(this.jInternalFrame1.getSize());
        vertexList = new ArrayList();
        edges = new ArrayList();
        vertexNames = new ArrayList();
        myGraph = new Grafo();
        this.jInternalFrame1.getContentPane().add(component);
        this.repaint();
    }//GEN-LAST:event_jButton1MouseClicked

    private void bt_addVertexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_addVertexMouseClicked
        // TODO add your handling code here:
        if (validVertexName(this.tf_vertexName.getText())) {
            component.getGraph().getModel().beginUpdate();
            try {
                Object v1 = component.getGraph().insertVertex(parent, this.tf_vertexName.getText(), this.tf_vertexName.getText(),
                        generatePosition(400), generatePosition(400), 80, 30);
                vertexList.add(v1);
                vertexNames.add(this.tf_vertexName.getText());
                if (vertexList.size() == 1) {
                    myGraph.setVerticePrincipal(new Vertice(this.tf_vertexName.getText()));
                } else {
                    myGraph.addVertice(this.tf_vertexName.getText());
                }
                JOptionPane.showMessageDialog(this, "Vertice Creado", "Exito", JOptionPane.PLAIN_MESSAGE);
                this.tf_vertexName.setText("");
            } finally {
                component.getGraph().getModel().endUpdate();
                updateBoxes();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se puede agregar el vertice", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_bt_addVertexMouseClicked

    private void bt_addEdgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_addEdgeMouseClicked
        // TODO add your handling code here:
        mxICell source = getVertexByName(this.cb_source.getSelectedItem().toString());
        mxICell target = getVertexByName(this.cb_target.getSelectedItem().toString());

        if (!source.equals(target) && verifyEdges(source, target)) {
            component.getGraph().getModel().beginUpdate();
            try {
                Object edge = component.getGraph().insertEdge(parent, this.tf_peso.getText(), this.tf_peso.getText(), source, target);
                edges.add(edge);
                edge = component.getGraph().insertEdge(parent, this.tf_peso.getText(), this.tf_peso.getText(), target, source);
                edges.add(edge);
                myEdge = new Arista(myGraph.getVertexByValue(source.getValue().toString()), myGraph.getVertexByValue(target.getValue().toString()),
                        Integer.parseInt(this.tf_peso.getText()));
                myGraph.addEdge(myGraph.getVertexByValue(source.getValue().toString()), myEdge);
                myEdge = new Arista(myGraph.getVertexByValue(target.getValue().toString()), myGraph.getVertexByValue(source.getValue().toString()),
                        Integer.parseInt(this.tf_peso.getText()));
                myGraph.addEdge(myGraph.getVertexByValue(target.getValue().toString()), myEdge);
            } finally {
                component.getGraph().getModel().endUpdate();
                JOptionPane.showMessageDialog(this, "Arista Creada", "Exito", JOptionPane.PLAIN_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se puede agregar la arista", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bt_addEdgeMouseClicked

    private void bt_TSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_TSPMouseClicked
         //TODO add your handling code here:
       ArrayList<ArrayList<Vertice>> allIS = new ArrayList();
       
       this.getAllIndependentSets(myGraph.getCopy(), allIS);
       
       for(int i = 0; i < allIS.size(); i++){
           System.out.println(allIS.get(i).toString());
       }
        System.out.println("Se necesitan: " + allIS.size() + " colores");
    }//GEN-LAST:event_bt_TSPMouseClicked

    private void bt_complementoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_complementoMouseClicked
        // TODO add your handling code here:
        ArrayList<ArrayList<Vertice>> cliques = this.Clique();
        ArrayList<Vertice> clique = this.getMaxClique(cliques);
        System.out.println("El clique mas grande es: " + clique.toString());
    }//GEN-LAST:event_bt_complementoMouseClicked

    private void bt_BronKerboschMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_BronKerboschMouseClicked
        // TODO add your handling code here:
        ArrayList<Vertice> clique = new ArrayList();
        BronKerbosch(myGraph.getTodosVertices(), new ArrayList<Vertice>(), new ArrayList<Vertice>(),
                clique);
        System.out.println("Clique: " + clique.toString());
    }//GEN-LAST:event_bt_BronKerboschMouseClicked

    public mxICell getVertexByName(String name) {
        mxICell vertex = new mxCell();
        for (int i = 0; i < vertexList.size(); i++) {
            if (((mxICell) vertexList.get(i)).getId().equals(name)) {
                vertex = ((mxICell) vertexList.get(i));
            }
        }
        return vertex;
    }

    public int generatePosition(int bound) {
        Random r = new Random();
        return r.nextInt(bound) + 1;
    }

    public boolean validVertexName(String name) {
        for (int i = 0; i < vertexNames.size(); i++) {
            if (vertexNames.get(i).equals(name)) {
                return false;
            }
        }
        return true;
    }

    public boolean verifyEdges(mxICell source, mxICell target) {
        for (int i = 0; i < edges.size(); i++) {
            if (((mxCell) edges.get(i)).getSource().equals(source) && ((mxCell) edges.get(i)).getTarget().equals(target)) {
                return false;
            }
        }
        return true;
    }

    public void updateBoxes() {
        DefaultComboBoxModel<String> model1 = new DefaultComboBoxModel();
        DefaultComboBoxModel<String> model2 = new DefaultComboBoxModel();

        for (int i = 0; i < vertexNames.size(); i++) {
            model1.addElement(vertexNames.get(i));
            model2.addElement(vertexNames.get(i));
        }

        this.cb_source.setModel(model1);
        this.cb_target.setModel(model2);
    }

    public ArrayList<ArrayList<Vertice>> Clique() {
        ArrayList<ArrayList<Vertice>> cliques = new ArrayList();
        ArrayList<Vertice> myVertex = myGraph.getTodosVertices();
        ArrayList<Vertice> temp = new ArrayList();

        for (int i = 0; i < myVertex.size(); i++) {
            temp = new ArrayList();
            temp.add(myVertex.get(i));
            temp = getClique(myVertex.get(i).getNeighborsAndMe(), 1, myVertex.get(i).getAristas().size() + 1, temp);
            cliques.add(temp);
        }
        return cliques;
    }

    public boolean isSubset(ArrayList<Vertice> set, ArrayList<Vertice> subset) {
        if (subset.size() > set.size()) {
            return false;
        }

        for (int i = 0; i < subset.size(); i++) {
            if (!set.contains(subset.get(i))) {
                return false;
            }
        }
        return true;
    }

    public ArrayList<Vertice> getClique(ArrayList<Vertice> list, int position, int size, ArrayList<Vertice> retorno) {
        if (position == size - 1) {
            if (isSubset(list.get(position).getNeighborsAndMe(), list)) {
                retorno.add(list.get(position));
            }
        } else {
            if (isSubset(list.get(position).getNeighborsAndMe(), list)) {
                retorno.add(list.get(position));
                getClique(list, position + 1, size, retorno);
            } else {
                list.remove(list.get(position));
                getClique(list, position, size - 1, retorno);
            }
        }
        return retorno;
    }

    public ArrayList<Vertice> getMaxClique(ArrayList<ArrayList<Vertice>> list) {
        ArrayList<Vertice> retorno = new ArrayList();

        retorno = list.get(0);

        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).size() > retorno.size()) {
                retorno = list.get(i);
            }
        }
        return retorno;
    }

    public void BronKerbosch(ArrayList<Vertice> P, ArrayList<Vertice> R, ArrayList<Vertice> X, ArrayList<Vertice> clique) {
        if (P.size() + X.size() == 0) {
            if (R.size() > clique.size()) {
                clique.clear();
                for (int i = 0; i < R.size(); i++) {
                    clique.add(R.get(i));
                }
            }
        } else {
            for (int i = 0; i < P.size(); i++) {
                BronKerbosch(getInterception(P, P.get(i).getNeighbors()), getUnion(R, P.get(i)), getInterception(X, P.get(i).getNeighbors()), clique);
                X.add(P.get(i));
                P.remove(P.get(i));
            }
        }
    }

    public ArrayList<Vertice> getUnion(ArrayList<Vertice> set, Vertice vertex) {
        ArrayList<Vertice> retorno = new ArrayList();
        for (int i = 0; i < set.size(); i++) {
            retorno.add(set.get(i));
        }
        retorno.add(vertex);
        return retorno;
    }

    public ArrayList<Vertice> getInterception(ArrayList<Vertice> set1, ArrayList<Vertice> set2) {
        ArrayList<Vertice> interception = new ArrayList();

        for (int i = 0; i < set1.size(); i++) {
            for (int k = 0; k < set2.size(); k++) {
                if (set1.get(i).equals(set2.get(k))) {
                    interception.add(set1.get(i));
                }
            }
        }
        return interception;
    }

    public void getIndependentSet(Grafo copy1, ArrayList<Vertice> independentSet) {
        if (copy1.verticePrincipal.getValue().toString().equals("-1")) {
            return;
        } else {
            ArrayList<Vertice> ordered = copy1.getOrderedVertex();
            ArrayList<Vertice> myNeighbors = ordered.get(0).getNeighborsAndMe();
            independentSet.add(ordered.get(0));

            for (int i = 0; i < myNeighbors.size(); i++) {
                copy1.removeVertex(myNeighbors.get(i));
            }
            
            getIndependentSet(copy1, independentSet);
        }
    }

    public void getAllIndependentSets(Grafo copy, ArrayList<ArrayList<Vertice>> allIS) {
        if (copy.verticePrincipal.getValue().toString().equals("-1")) {
            return;
        } else {
            ArrayList<Vertice> independentSet = new ArrayList();
            this.getIndependentSet(copy.getCopy(), independentSet);
            allIS.add(independentSet);
            
            for (int i = 0; i < independentSet.size(); i++) {
                copy.removeVertex(copy.getVertexByValue(independentSet.get(i).value.toString()));
            }
            this.getAllIndependentSets(copy, allIS);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_BronKerbosch;
    private javax.swing.JButton bt_TSP;
    private javax.swing.JButton bt_addEdge;
    private javax.swing.JButton bt_addVertex;
    private javax.swing.JButton bt_complemento;
    private javax.swing.JComboBox<String> cb_source;
    private javax.swing.JComboBox<String> cb_target;
    private javax.swing.JButton jButton1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField tf_peso;
    private javax.swing.JTextField tf_vertexName;
    // End of variables declaration//GEN-END:variables
    mxGraph graph;
    Object parent;
    mxGraphComponent component;
    ArrayList<Object> vertexList;
    ArrayList<String> vertexNames;
    ArrayList<Object> edges;
    Grafo myGraph = new Grafo();
    Arista myEdge = new Arista();
    ArrayList<Vertice> myVertex = new ArrayList();
}
